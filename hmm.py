from pyrogram import Client, filters
import requests
import json

api_id=9907811
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import subprocess


app = Client(
    "PhotoGen",
    bot_token="6514904551:AAFo2TL21vPr6nk74BX7VY8ZmDzR97gofUM",
    api_id=api_id,
    api_hash="b5adb7f7d4a096750edec1bc6daacd56"
)

# Handler for the /start command
@app.on_message(filters.command("start"))
def start_command(client, message):
    # Get the user's username and name
    username = message.from_user.username
    name = message.from_user.first_name

    # Send a welcome message to the user
    welcome_message = f"Hey, {name} (@{username})! How can I assist you today?\n\nI am a Telegram bot to generate images. Command: /generate <prompt>\nE.g.: /generate seir the demon stands atop, unfazed in his horse with his wings and lightning strike, standing like he is about to wage a war against god himself"

    # Create the inline keyboard with the "About Dev" button
    inline_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("About Dev", callback_data="about_dev")]])

    # Send the welcome message with the inline keyboard
    message.reply_text(welcome_message, reply_markup=inline_keyboard)

@app.on_callback_query()
def handle_callback(client, callback_query):
    if callback_query.data == "about_dev":
        # Send the image with caption
        image_caption = "Seir - @seirtheprince \n\n **In the depths of darkness, where nightmares take shape and fear reigns supreme, there exists a malevolent entity known as Seir the Demon. Whispers of his name send shivers down the spines of even the bravest souls, for he is the embodiment of terror itself.**\n\n **Warning**: Dont dm for asking api its not free it costs something so be it.Only dm if you found that bot is down "
        client.send_photo(callback_query.message.chat.id, photo="https://graph.org/file/e737f6e065bec956800ac.jpg", caption=image_caption)

# Handler for the /generate command
@app.on_message(filters.command("generate"))
def generate_image(client, message):
    # Extract the prompt from the command
    prompt = message.text.split("/generate", maxsplit=1)[1].strip()

    cookies = {
    '_cfuvid': 'ShF1cyy5u684IN2Y6wowQisWPikKiE2SL84_cwQ5fj4-1695186394480-0-604800000',
    '__client': 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNsaWVudF8yVmVCNGUzbGc0VGpmdWxURUN6Z2hNbHA0bTEiLCJyb3RhdGluZ190b2tlbiI6Inhob21kNTd4cndrbzQ5amp2ODBxbmwyaTMxM2gzMmNqd3FpZTZxcXcifQ.y4cNWbHV_R_BkWm5WtcgcGBpXfIlgJ1FDcUU_vwny7A2LOI9NjCoNfM_a5yAdwWvNHzTxxGRGgy9r_vjkTSG-ZB2tV87porO_bn-YvuWDtzPbz_mQZ-oDFo5mAJwamug8r4PGvm5YGdwUbPrwuLa9MyOjOzkS294kAXDhk8N0qbs82j6tZw9lc_tK6nRT9jmGR6CpCFc_s-FWJpS2Hsd7Kln4NEdqj3s9rtr6RnL53LcAzOgOK8xD1mAsgDhcJE_j0bBkloRVFMj0LWgzgF5nCcs6aY1wuOANIp0BwG667IJcKjsL2gLz347NHDOKCEKkDdLzXinaxH_YK8uQjQ_-A',
    '__client_uat': '1695186510',
    '__cf_bm': 'H8qLquuPsCOUdc0QR7O9H6KUJDQvQFAPEKqMB73bZLU-1695187341-0-AW8YumBoQkX9+6JvIAh5NUb2KeKPBSxV7V6yE3JWu2ZcCaV0HF8X2LjoBz/BqLyN56NBBi+z96EyF0pWQ2LyBBY=',
    }

    headers = {
        'authority': 'clerk.forefront.ai',
        'accept': '*/*',
        'accept-language': 'en-US,en;q=0.7',
        # 'content-length': '0',
        'content-type': 'application/x-www-form-urlencoded',
        # 'cookie': '_cfuvid=ShF1cyy5u684IN2Y6wowQisWPikKiE2SL84_cwQ5fj4-1695186394480-0-604800000; __client=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImNsaWVudF8yVmVCNGUzbGc0VGpmdWxURUN6Z2hNbHA0bTEiLCJyb3RhdGluZ190b2tlbiI6Inhob21kNTd4cndrbzQ5amp2ODBxbmwyaTMxM2gzMmNqd3FpZTZxcXcifQ.y4cNWbHV_R_BkWm5WtcgcGBpXfIlgJ1FDcUU_vwny7A2LOI9NjCoNfM_a5yAdwWvNHzTxxGRGgy9r_vjkTSG-ZB2tV87porO_bn-YvuWDtzPbz_mQZ-oDFo5mAJwamug8r4PGvm5YGdwUbPrwuLa9MyOjOzkS294kAXDhk8N0qbs82j6tZw9lc_tK6nRT9jmGR6CpCFc_s-FWJpS2Hsd7Kln4NEdqj3s9rtr6RnL53LcAzOgOK8xD1mAsgDhcJE_j0bBkloRVFMj0LWgzgF5nCcs6aY1wuOANIp0BwG667IJcKjsL2gLz347NHDOKCEKkDdLzXinaxH_YK8uQjQ_-A; __client_uat=1695186510; __cf_bm=H8qLquuPsCOUdc0QR7O9H6KUJDQvQFAPEKqMB73bZLU-1695187341-0-AW8YumBoQkX9+6JvIAh5NUb2KeKPBSxV7V6yE3JWu2ZcCaV0HF8X2LjoBz/BqLyN56NBBi+z96EyF0pWQ2LyBBY=',
        'origin': 'https://www.forefront.ai',
        'referer': 'https://www.forefront.ai/',
        'sec-ch-ua': '"Brave";v="117", "Not;A=Brand";v="8", "Chromium";v="117"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'same-site',
        'sec-gpc': '1',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36',
    }

    params = {
        '_clerk_js_version': '4.57.0',
    }

    response = requests.post(
        'https://clerk.forefront.ai/v1/client/sessions/sess_2VeB8uk9pIJdA162DvbdRYv2S9y/tokens',
        params=params,
        cookies=cookies,
        headers=headers,
    )
    token = response.json()['jwt']
    if not token:
        app.send_message('Oh fucking hell report to the owner asap',message.chat.id)
    print(token)
    #generate image 


    headers = {
        'authority': 'chat-production-5759.up.railway.app',
        'accept': '*/*',
        'accept-language': 'en-US,en;q=0.7',
        'authorization': f'Bearer {token}',
        'content-type': 'application/json',
        'origin': 'https://www.forefront.ai',
        'referer': 'https://www.forefront.ai/',
        'sec-ch-ua': '"Brave";v="117", "Not;A=Brand";v="8", "Chromium";v="117"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'sec-fetch-dest': 'empty',
        'sec-fetch-mode': 'cors',
        'sec-fetch-site': 'cross-site',
        'sec-gpc': '1',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36',
    }

    json_data = {
        'json': {
            'prompt': f'{prompt}',
        },
    }

    response = requests.post(
        'https://chat-production-5759.up.railway.app/api/trpc/personas.generateAvatar',
        headers=headers,
        json=json_data,
    )
    try:
        image_url = response.json()['result']['data']['json']
    except Exception as e:
       message.reply_text("Apologies, the generation process failed. Please consider providing non-NSFW prompts for a successful result.")
    if not image_url:
        print('huehue')
        message.reply_text("Apologies, the generation process failed. Please consider providing non-NSFW prompts for a successful result.")
    else:
        message.reply_photo(image_url)

        # Log the image in the admin channel
        admin_channel_id = "-1001684981793"
        app.send_photo(chat_id=admin_channel_id, photo=image_url, caption=f"Generated image by @{message.from_user.username}\n\nPrompt:{prompt}")

# Start the bot
@app.on_message(filters.command("run", prefixes="/"))
def run_command(client, message):
    # Get the command from the message
    command = message.text.split(maxsplit=1)[1]

    try:
        # Run the command using subprocess
        result = subprocess.run(command, shell=True, capture_output=True, text=True)

        # Check if the output is bigger than the Telegram limit (4096 characters)
        if len(result.stdout) > 4096:
            headers = {
                'authority': 'batbin.me',
                'accept': 'application/json, text/plain, */*',
                'accept-language': 'en-US,en;q=0.5',
                'content-type': 'text/plain;charset=UTF-8',
                'origin': 'https://batbin.me',
                'referer': 'https://batbin.me/',
                'sec-ch-ua': '"Brave";v="117", "Not;A=Brand";v="8", "Chromium";v="117"',
                'sec-ch-ua-mobile': '?0',
                'sec-ch-ua-platform': '"Windows"',
                'sec-fetch-dest': 'empty',
                'sec-fetch-mode': 'cors',
                'sec-fetch-site': 'same-origin',
                'sec-gpc': '1',
                'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36',
            }

            data = result
            response = requests.post('https://batbin.me/api/v2/paste', headers=headers, data=data)
            print(response.text)
            data = json.loads(response)

            message_id = data["message"]
            join_url = f"https://batbin.me/{message_id}"
                        
            message.reply_text(f"The output is too big to send. You can find it here: {join_url}")
        else:
            # If the output is smaller, send it as a reply
            try:
                message.reply_text(result.stdout)
            except Exception as e:
                headers = {
                'authority': 'batbin.me',
                'accept': 'application/json, text/plain, */*',
                'accept-language': 'en-US,en;q=0.5',
                'content-type': 'text/plain;charset=UTF-8',
                'origin': 'https://batbin.me',
                'referer': 'https://batbin.me/',
                'sec-ch-ua': '"Brave";v="117", "Not;A=Brand";v="8", "Chromium";v="117"',
                'sec-ch-ua-mobile': '?0',
                'sec-ch-ua-platform': '"Windows"',
                'sec-fetch-dest': 'empty',
                'sec-fetch-mode': 'cors',
                'sec-fetch-site': 'same-origin',
                'sec-gpc': '1',
                'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36',
            }

                data = result
                response = requests.post('https://batbin.me/api/v2/paste', headers=headers, data=data)
                data = json.loads(response)
                message_id = data["message"]
                join_url = f"https://batbin.me/{message_id}"
                message.reply_text(f"The output is too big to send. You can find it here: {join_url}")




            
    except Exception as e:
        # Send an error message if the command fails
        message.reply_text(f"Error: {str(e)}")
app.run()
